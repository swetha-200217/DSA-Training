#DT-13-array-rotation
def rotate_array(nums, k):
   
    n = len(nums)
    k %= n  
    def reverse(nums, start, end):
        while start < end:
            nums[start], nums[end] = nums[end], nums[start]
            start += 1
            end -= 1
    
   
    reverse(nums, 0, n - 1)
 
    reverse(nums, 0, k - 1)
   
    reverse(nums, k, n - 1)
    
    return nums
    
#Longest Substring Without Repeating CharactersDescription: Given a string, find the length of the longest substring without repeating characters. Input: "abcabcbb"
#Output: 3 

def length_of_longest_substring(s: str) -> int:
    char_index = {}
    start = max_length = 0

    for i, char in enumerate(s):
        if char in char_index and char_index[char] >= start:
            start = char_index[char] + 1
        char_index[char] = i
        max_length = max(max_length, i - start + 1)

    return max_length


input_str = "abcabcbb"
output = length_of_longest_substring(input_str)
print(output)
#main
